{"storchaka@gmail.com": [{"type": "email", "time": 1559314933, "time_spent": 4, "content": "Subject: [Python-Dev] Expected stability of PyCode_New() and\n types.CodeType() signatures\n\n\n31.05.19 11:46, Petr Viktorin ????:\n> PEP 570 (Positional-Only Parameters) changed the signatures of \n> PyCode_New() and types.CodeType(), adding a new argument for \"posargcount\".\n> Our policy for such changes seems to be fragmented tribal knowledge. I'm \n> writing to check if my understanding is reasonable, so I can apply it \n> and document it explicitly.\n> \n> There is a surprisingly large ecosystem of tools that create code objects.\n> The expectation seems to be that these tools will need to be adapted for \n> each minor version of Python.\n\nI have a related proposition. Yesterday I have reported two bugs (and \nPablo quickly fixed them) related to handling positional-only arguments. \nThese bugs were occurred due to subtle changing the meaning of \nco_argcount. When we make some existing parameters positional-only, we \ndo not add new arguments, but mark existing parameters. But co_argcount \nnow means the only number of positional-or-keyword parameters. Most code \nwhich used co_argcount needs now to be changed to use \nco_posonlyargcount+co_argcount.\n\nI propose to make co_argcount meaning the number of positional \nparameters (i.e. positional-only + positional-or-keyword). This would \nremove the need of changing the code that uses co_argcount.\n\nAs for the code object constructor, I propose to make posonlyargcount an \noptional parameter (default 0) added after existing parameters. \nPyCode_New() can be kept unchanged, but we can add new PyCode_New2() or \nPyCode_NewEx() with different signature.\n\n"}, {"type": "git_log", "time": 1561565264, "time_spent": 74, "content": "    bpo-37163: Make the obj argument of dataclasses.replace() a positional-only. (GH-14390)"}], "solipsis@pitrou.net": [{"type": "email", "time": 1559323832, "time_spent": 8, "content": "Subject: [Python-Dev] PEP 595: Improving bugs.python.org\n\n\nOn Fri, 31 May 2019 11:58:22 -0700\nNathaniel Smith <njs at pobox.com> wrote:\n> On Fri, May 31, 2019 at 11:39 AM Barry Warsaw <barry at python.org> wrote:\n> >\n> > On May 31, 2019, at 01:22, Antoine Pitrou <solipsis at pitrou.net> wrote:\n> >  \n> > > I second this.\n> > >\n> > > There are currently ~7000 bugs open on bugs.python.org.  The Web UI\n> > > makes a good job of actually being able to navigate through these bugs,\n> > > search through them, etc.\n> > >\n> > > Did the Steering Council conduct a usability study of Github Issues\n> > > with those ~7000 bugs open?  If not, then I think the acceptance of\n> > > migrating to Github is a rushed job.  Please reconsider.  \n> >\n> > Thanks for your feedback Antoine.\n> >\n> > This is a tricky issue, with many factors and tradeoffs to consider.  I really appreciate Ezio and Berker working on PEP 595, so we can put all these issues on the table.\n> >\n> > I think one of the most important tradeoffs is balancing the needs of existing developers (those who actively triage bugs today), and future contributors.  But this and other UX issues are difficult to compare on our actual data right now.  I fully expect that just as with the switch to git, we?ll do lots of sample imports and prototyping to ensure that GitHub issues will actually work for us (given our unique requirements), and to help achieve the proper balance.  It does us no good to switch if we just anger all the existing devs.\n> >\n> > IMHO, if the switch to GH doesn?t improve our workflow, then it definitely warrants a reevaluation.  I think things will be better, but let?s prove it.  \n> \n> Perhaps we should put an explicit step on the transition plan, after\n> the prototyping, that's \"gather feedback from prototypes, re-evaluate,\n> make final go/no-go decision\"? I assume we'll want to do that anyway,\n> and having it formally written down might reassure people. It might\n> also encourage more people to actually try out the prototypes if we\n> make it very clear that they're going to be asked for feedback.\n\nIndeed, regardless of the exact implementation details, I think \"try\nfirst, decide after\" is the right procedure here.\n\nRegards\n\nAntoine.\n"}, {"type": "email", "time": 1559410626, "time_spent": 28, "content": "Subject: [Python-Dev] obmalloc (was Have a big machine and spare time?\n Here's a possible Python bug.)\nReferences: <CAExdVNmP=LHAXbXmhsecq=S9dAEVb6UYykDQ=xUcO1zJVh1Pfw@mail.gmail.com>\n <CAEfz+TxM-_viFaaQgqFbzoON0VnN74dpyJsP4Db=Ui-wj9=J-w@mail.gmail.com>\n <CA+LW3i1w8AcjCjRjyGkJyLwdmiQZxTLv_AMxUtUJrPjQk6MYQA@mail.gmail.com>\n <CAEfz+TwcyHnOisiPc6qmNFfPSS63+Ts_6H08jKGCnFuTTk9frQ@mail.gmail.com>\n <64d3f69a-b900-d17d-679e-aa748d0a23ab@python.org>\n <CAPdQG2rr978QuKb08YBeiHCxGPbnmm9A3vTU3-_nvOngM976nw@mail.gmail.com>\n <20190526112415.33e4a02d@fsol>\n <CAExdVN=7VmELOvv-BfW-JL8yFEMVTLt=yyBsFNTWB7pugE9HmQ@mail.gmail.com>\nMessage-ID: <20190602113706.01c14820@fsol>\n\nOn Sun, 2 Jun 2019 00:56:52 -0500\nTim Peters <tim.peters at gmail.com> wrote:\n> \n> But because O is only trying to deal with small (<= 512 bytes)\n> requests, it can use a very fast method based on trivial address\n> arithmetic to find the size of an allocated block by just reading it\n> up from the start of the (4K) \"pool\" the address belongs to.  T can't\n> do that - it appears to need to look up the address in a more\n> elaborate radix tree, to find info recording the size of the block\n> (which may be just about anything - no upper limit).\n\nThe interesting thing here is that in many situations, the size is\nknown up front when deallocating - it is simply not communicated to the\ndeallocator because the traditional free() API takes a sole pointer,\nnot a size.  But CPython could communicate that size easily if we\nwould like to change the deallocation API.  Then there's no bother\nlooking up the allocated size in sophisticated lookup structures.\n\nI'll note that jemalloc provides such APIs:\nhttp://jemalloc.net/jemalloc.3.html\n\n\"\"\"The dallocx() function causes the memory referenced by ptr to be\nmade available for future allocations.\n\nThe sdallocx() function is an extension of dallocx() with a size\nparameter to allow the caller to pass in the allocation size as an\noptimization.\"\"\"\n\nRegards\n\nAntoine.\n\n\n> \n> > (well, of course, obmalloc doesn't have to worry about concurrent\n> > scenarios, which explains some of the simplicity)  \n> \n> Right, T has a different collection of free lists for each thread. so\n> on each entry has to figure out which collection to use (and so\n> doesn't need to lock).  That's not free.  O only has one collection,\n> and relies on the GIL.\n> \n> Against that, O burns cycles worrying about something else:  because\n> it was controversial when it was new, O thought it was necessary to\n> handle free/realloc calls even when passed addresses that had actually\n> been obtained from the system malloc/realloc.  The T docs I saw said\n> \"don't do that - things will blow up in mysterious ways\".\n> \n> That's where O's excruciating \"address_in_range()\" logic comes from.\n> While that's zippy and scales extremely well (it doesn't depend on how\n> many objects/arenas/pools exist), it's not free, and is a significant\n> part of the \"fast path\" expense for both allocation and deallocation.\n> \n> It also limits us to a maximum pool size of 4K (to avoid possible\n> segfaults when reading up memory that was actually obtained from the\n> system malloc/realloc), and that's become increasingly painful:  on\n> 64-bit boxes the bytes lost to pool headers increased, and O changed\n> to handle requests up to 512 bytes instead of its original limit of\n> 256.  O was intended to supply \"a bunch\" of  usable blocks per pool,\n> not just a handful.  We \"should\" really at least double the pool and\n> arena sizes now.\n> \n> I don't think we need to cater anymore to careless code that mixes\n> system memory calls with O calls (e.g., if an extension gets memory\n> via `malloc()`, it's its responsibility to call `free()`), and if not\n> then `address_in_range()` isn't really necessary anymore either, and\n> then we could increase the pool size.  O would, however, need a new\n> way to recognize when its version of malloc punted to the system\n> malloc.\n> \n> BTW, one more:  last I saw T never returns memory to \"the system\", but\n> O does - indeed, the parent thread here was all about _enormous_ time\n> waste due to that in O ;-)  That's not free either, but doesn't affect\n> O's fast paths.\n\n\n\n"}], "pablogsal@gmail.com": [{"type": "email", "time": 1559336974, "time_spent": 24, "content": "Subject: [Python-Dev] Expected stability of PyCode_New() and\n types.CodeType() signatures\nMessage-ID: <CAFjbc8GsB20m0K-ZbBoiMdiG0WjbS81s=XbTnHFNGTDjPdvA1g@mail.gmail.com>\n\n>\n> I propose to make co_argcount meaning the number of positional\n> parameters (i.e. positional-only + positional-or-keyword). This would\n> remove the need of changing the code that uses co_argcount.\n>\n\nI like the proposal, it will certainly make handling normal cases\ndownstream much easier because\nif you do not care about positional-only arguments you can keep\ninspecting co_argcount\nand that\nwill give you what you expect. Note that if we choose to do this, it has to\nbe done now-ish IMHO to\navoid making the change painful because it will change the semantics of\nco_argcount.\n\n\n> As for the code object constructor, I propose to make posonlyargcount an\n> optional parameter (default 0) added after existing parameters.\n> PyCode_New() can be kept unchanged, but we can add new PyCode_New2() or\n> PyCode_NewEx() with different signature.\n\n\nI am not convinced about having a default argument in the code constructor.\nThe code constructor\nis kept with all arguments positional for efficiency and adding defaults\nwill make it slower or having\na more confusing an asymmetrical interface. Also, this will be misaligned\non how keyword-only\nparameters are provided. This is by far not the first time this constructor\nhas changed.\n\nOn the Python side, the new code.replace should cover most of the\nPython-side use cases regarding\ncreating code objects from the Python side.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://mail.python.org/pipermail/python-dev/attachments/20190601/8b1827fb/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: license.dash-license\nType: application/octet-stream\nSize: 693 bytes\nDesc: not available\nURL: <http://mail.python.org/pipermail/python-dev/attachments/20190601/8b1827fb/attachment.obj>\n"}, {"type": "email", "time": 1559346932, "time_spent": 3, "content": "Subject: [Python-Dev] Expected stability of PyCode_New() and\n types.CodeType() signatures\nMessage-ID: <CAFjbc8E+zdp096fVFBaNnD7UFT6feiTr0sPQkdytD7KtYy3Cnw@mail.gmail.com>\n\nOpened https://bugs.python.org/issue37122 to track this in the bug tracker.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://mail.python.org/pipermail/python-dev/attachments/20190601/633b348e/attachment.html>\n"}, {"type": "email", "time": 1559500738, "time_spent": 1, "content": "Subject: [Python-Dev] Recent buildbot reports and asyncio test failures\nMessage-ID: <CAFjbc8HwNvxJyC-AFEbXG5ktg5Oe9jB8F31RXfn7O5fuVkSSOA@mail.gmail.com>\n\nHi everyone,\n\nJust a heads-up regarding some messages you will see in your pull requests.\nThere is an intermittent failure on some buildbots\nregarding asyncio:\n\nhttps://buildbot.python.org/all/#/builders/21\n\nAs the builds do not fail all the time, the systems understand that if your\n(merged) commits fail to build, they may be the cause\nof the failure and then it does a report into the pull request.\n\nI am working on investigating a way to improve the report mechanism to make\nit less noisy in this case, but bear in mind that\nthe correct way to solve this is fixing the asyncio bug in the test suite\nand this won't likely go away completely until is solved.\n\nWe are doing all that we can to solve all the recent leaks and failures on\nthe test suite, but there is a noticeable increase in the\nnumber of merged pull requests because of the imminent feature freeze and\nbecause this happens across several timezones\nis very difficult to get them all.\n\nThanks to everyone that is helping solving these bugs :)\n\nRegards from sunny London,\nPablo Galindo Salgado\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://mail.python.org/pipermail/python-dev/attachments/20190603/bcd8def7/attachment.html>\n"}], "stefan_ml@behnel.de": [{"type": "email", "time": 1559338089, "time_spent": 9, "content": "Subject: [Python-Dev] Expected stability of PyCode_New() and\n types.CodeType() signatures\n\n\nSerhiy Storchaka schrieb am 01.06.19 um 09:02:\n> I have a related proposition. Yesterday I have reported two bugs (and Pablo\n> quickly fixed them) related to handling positional-only arguments. These\n> bugs were occurred due to subtle changing the meaning of co_argcount. When\n> we make some existing parameters positional-only, we do not add new\n> arguments, but mark existing parameters. But co_argcount now means the only\n> number of positional-or-keyword parameters. Most code which used\n> co_argcount needs now to be changed to use co_posonlyargcount+co_argcount.\n> \n> I propose to make co_argcount meaning the number of positional parameters\n> (i.e. positional-only + positional-or-keyword). This would remove the need\n> of changing the code that uses co_argcount.\n\nSounds reasonable to me. The main distinction points are positional\narguments vs. keyword arguments vs. local variables. Whether the positional\nones are positional or positional-only is irrelevant in many cases.\n\n\n> PyCode_New() can be kept unchanged, but we can add new PyCode_New2() or\n> PyCode_NewEx() with different signature.\n\nIt's not a commonly used function, and it's easy for C code to adapt. I\ndon't think it's worth adding a new function to the C-API here, compared to\njust changing the signature. Very few users would benefit, at the cost of\nadded complexity.\n\nStefan\n\n"}, {"type": "git_log", "time": 1559418543, "time_spent": 58, "content": "    Clean up and reduce visual clutter in the makeunicode.py script. (GH-7558)"}], "tim.peters@gmail.com": [{"type": "email", "time": 1559397412, "time_spent": 24, "content": "Subject: [Python-Dev] obmalloc (was Have a big machine and spare time?\n Here's a possible Python bug.)\n\n\n[Antoine Pitrou, replying to Thomas Wouters]\n> Interesting that a 20-year simple allocator (obmalloc) is able to do\n> better than the sophisticated TCMalloc.\n\nIt's very hard to beat obmalloc (O) at what it does.  TCMalloc (T) is\nactually very similar where they overlap, but has to be more complex\nbecause it's trying to do more than O.\n\nIn either case, for small objects \"the fast path\" consists merely of\ntaking the first block of memory off a singly-linked size-segregated\nfree list.  For freeing, the fast path is just linking the block back\nto the front of the appropriate free list.  What _could_ be faster?  A\n\"bump allocator\" allocates faster (just increment a highwater mark),\nbut creates worlds of problems when freeing.\n\nBut because O is only trying to deal with small (<= 512 bytes)\nrequests, it can use a very fast method based on trivial address\narithmetic to find the size of an allocated block by just reading it\nup from the start of the (4K) \"pool\" the address belongs to.  T can't\ndo that - it appears to need to look up the address in a more\nelaborate radix tree, to find info recording the size of the block\n(which may be just about anything - no upper limit).\n\n> (well, of course, obmalloc doesn't have to worry about concurrent\n> scenarios, which explains some of the simplicity)\n\nRight, T has a different collection of free lists for each thread. so\non each entry has to figure out which collection to use (and so\ndoesn't need to lock).  That's not free.  O only has one collection,\nand relies on the GIL.\n\nAgainst that, O burns cycles worrying about something else:  because\nit was controversial when it was new, O thought it was necessary to\nhandle free/realloc calls even when passed addresses that had actually\nbeen obtained from the system malloc/realloc.  The T docs I saw said\n\"don't do that - things will blow up in mysterious ways\".\n\nThat's where O's excruciating \"address_in_range()\" logic comes from.\nWhile that's zippy and scales extremely well (it doesn't depend on how\nmany objects/arenas/pools exist), it's not free, and is a significant\npart of the \"fast path\" expense for both allocation and deallocation.\n\nIt also limits us to a maximum pool size of 4K (to avoid possible\nsegfaults when reading up memory that was actually obtained from the\nsystem malloc/realloc), and that's become increasingly painful:  on\n64-bit boxes the bytes lost to pool headers increased, and O changed\nto handle requests up to 512 bytes instead of its original limit of\n256.  O was intended to supply \"a bunch\" of  usable blocks per pool,\nnot just a handful.  We \"should\" really at least double the pool and\narena sizes now.\n\nI don't think we need to cater anymore to careless code that mixes\nsystem memory calls with O calls (e.g., if an extension gets memory\nvia `malloc()`, it's its responsibility to call `free()`), and if not\nthen `address_in_range()` isn't really necessary anymore either, and\nthen we could increase the pool size.  O would, however, need a new\nway to recognize when its version of malloc punted to the system\nmalloc.\n\nBTW, one more:  last I saw T never returns memory to \"the system\", but\nO does - indeed, the parent thread here was all about _enormous_ time\nwaste due to that in O ;-)  That's not free either, but doesn't affect\nO's fast paths.\n"}, {"type": "git_log", "time": 1560397263, "time_spent": 57, "content": "    bpo-37257:  obmalloc:  stop simple arena thrashing (#14039)\n    \n    GH-14039:  allow (no more than) one wholly empty arena on the usable_arenas list.\n    \n    This prevents thrashing in some easily-provoked simple cases that could end up creating and destroying an arena on each loop iteration in client code.   Intuitively, if the only arena on the list becomes empty, it makes scant sense to give it back to the system unless we know we'll never need another free pool again before another arena frees a pool.  If the latter obtains, then - yes - this will \"waste\" an arena."}], "ezio.melotti@gmail.com": [{"type": "email", "time": 1559406282, "time_spent": 11, "content": "Subject: [Python-Dev] PEP 595: Improving bugs.python.org\n\n\nOn Sat, Jun 1, 2019 at 11:50 AM Antoine Pitrou <solipsis at pitrou.net> wrote:\n>\n> On Fri, 31 May 2019 11:58:22 -0700\n> Nathaniel Smith <njs at pobox.com> wrote:\n> > On Fri, May 31, 2019 at 11:39 AM Barry Warsaw <barry at python.org> wrote:\n> > >\n> > > On May 31, 2019, at 01:22, Antoine Pitrou <solipsis at pitrou.net> wrote:\n> > >\n> > > > I second this.\n> > > >\n> > > > There are currently ~7000 bugs open on bugs.python.org.  The Web UI\n> > > > makes a good job of actually being able to navigate through these bugs,\n> > > > search through them, etc.\n> > > >\n> > > > Did the Steering Council conduct a usability study of Github Issues\n> > > > with those ~7000 bugs open?  If not, then I think the acceptance of\n> > > > migrating to Github is a rushed job.  Please reconsider.\n> > >\n> > > Thanks for your feedback Antoine.\n> > >\n> > > This is a tricky issue, with many factors and tradeoffs to consider.  I really appreciate Ezio and Berker working on PEP 595, so we can put all these issues on the table.\n> > >\n> > > I think one of the most important tradeoffs is balancing the needs of existing developers (those who actively triage bugs today), and future contributors.\n\nThese can be further divided in several groups: from core devs and\nrelease managers, to triagers, to regular and occasional contributors,\nto people that just want to report an issue and be done with it, to\npeople that think the error they just got is a Python bug, each of\nthem with different goals and needs.\n\nI think that rather than discussing whether GitHub Issues is better or\nworse than Roundup, we should first try to understand who is facing\nwhat issues now, and who will face what issues after the switch.  This\ncan be done both by gathering feedback from different types of people\nand by testing and comparing the solutions (see below).\n\nOnce we know what the issues are, we should evaluate if and how we can\naddress them, and also -- if we can't make everyone happy -- what\ngroups of people we want to prioritize (e.g. do we want core devs to\nbe more effective at dealing with the thousands of already existing\nissues, or we want to make it easier for users to report new bugs?).\n\n> > >  But this and other UX issues are difficult to compare on our actual data right now.  I fully expect that just as with the switch to git, we?ll do lots of sample imports and prototyping to ensure that GitHub issues will actually work for us (given our unique requirements), and to help achieve the proper balance.  It does us no good to switch if we just anger all the existing devs.\n> > >\n> > > IMHO, if the switch to GH doesn?t improve our workflow, then it definitely warrants a reevaluation.  I think things will be better, but let?s prove it.\n> >\n> > Perhaps we should put an explicit step on the transition plan, after\n> > the prototyping, that's \"gather feedback from prototypes, re-evaluate,\n> > make final go/no-go decision\"? I assume we'll want to do that anyway,\n> > and having it formally written down might reassure people. It might\n> > also encourage more people to actually try out the prototypes if we\n> > make it very clear that they're going to be asked for feedback.\n>\n> Indeed, regardless of the exact implementation details, I think \"try\n> first, decide after\" is the right procedure here.\n>\n\nTesting a change of this magnitude is not trivial.  I can see several\npossible options:\n* using the on-demand approach proposed by PEP 588, a full migration,\nor some other solution (e.g. parallel, synced trackers);\n* doing a throwaway test migration (import zero/some/all existing\nissues, then discard any new message/issue at the end of the test) or\nusing real issues directly (import zero/some/all issues and keep\nadding real messages/issues);\n  * if we do a test migration and it works, we might need to do a\nsecond, real migration, possibly involving the GH staff twice; if it\ndoesn't work, we discard everything and that's it;\n  * if we use real issues, we might need to migrate things back to\nRoundup if GH doesn't fit our needs and it might be confusing for\nusers;\n* starting from scratch on GH with new issues (at least initially, for\ntesting purposes) or porting some/all issues from bpo;\n  * if we start from scratch we don't need to write the tools to\nmigrate, but we won't have feedback about searching/navigating through\nlot of issues;\n  * if we port some/all the issues, we need to write the tools to do\nit, even if it's just for testing purposes and we end going back to\nRoundup;\n* limiting the test to triagers/core-devs, or involve regular users;\n  * if we involve regular users we might get better feedback, but\nthere's risk of confusion (afaik the only way to inform users on\nGitHub Issues is writing another bot that adds messages) and backlash;\n* doing separate specific tests (e.g. having a read-only repo with all\nthe issues to test search/navigation, and a separate read-write repo\nto test issue creation) or a \"real-world\" test;\n  * some specific tests might be easier to setup (e.g. issue creation\ntest using templates), but for others we still need to import some/all\nthe issues;\n\nIf we agree on testing, I think we need to discuss the options, define\nand document a list of steps, and start working on it.\n\nBest Regards,\nEzio Melotti\n\n> Regards\n>\n> Antoine.\n"}], "armin.rigo@gmail.com": [{"type": "email", "time": 1559415812, "time_spent": 11, "content": "Subject: [Python-Dev] [PEP 558] thinking through locals() semantics\n\n\nHi,\n\nOn Wed, 29 May 2019 at 08:07, Greg Ewing <greg.ewing at canterbury.ac.nz> wrote:\n> Nick Coghlan wrote:\n> > Having a single locals() call de-optimize an entire function would be\n> > far from ideal.\n>\n> I don't see what would be so bad about that. The vast majority\n> of functions have no need for locals().\n\nYou have the occasional big function that benefits a lot from being\nJIT-compiled but which contains ``.format(**locals())``.  That occurs\nin practice, and that's why PyPy is happy that there is a difference\nbetween ``locals()`` and ``sys._getframe().f_locals``.  PyPy could be\nmade to support the full mutable view, but that's extra work that\nisn't done so far and is a bit unlikely to occur at this point.  It\nalso raises the significantly the efforts for other JIT\nimplementations of Python if they have to support a full-featured\n``locals()``; supporting ``_getframe().f_locals`` is to some extent\noptional, but supporting ``locals()`` is not.\n\n\nA bient?t,\n\nArmin.\n"}], "greg.ewing@canterbury.ac.nz": [{"type": "email", "time": 1559418722, "time_spent": 8, "content": "Subject: [Python-Dev] [PEP 558] thinking through locals() semantics\n\n\nArmin Rigo wrote:\n> You have the occasional big function that benefits a lot from being\n> JIT-compiled but which contains ``.format(**locals())``.\n\nThere should be a lot less need for that now that we have f-strings.\n\n-- \nGreg\n"}], "steve@pearwood.info": [{"type": "email", "time": 1559422277, "time_spent": 7, "content": "Subject: [Python-Dev] [PEP 558] thinking through locals() semantics\n\n\nOn Sun, Jun 02, 2019 at 11:52:02PM +1200, Greg Ewing wrote:\n> Armin Rigo wrote:\n> >You have the occasional big function that benefits a lot from being\n> >JIT-compiled but which contains ``.format(**locals())``.\n> \n> There should be a lot less need for that now that we have f-strings.\n\nI think you're forgetting that a lot of code (especially libraries) \neither have to support older versions of Python, and so cannot use \nf-strings at all, or was written using **locals before f-strings came \nalong, and hasn't been touched since.\n\nAnother case where f-strings don't help is when the template is \ndynamically generated.\n\nIt may be that there will be less new code written using **locals() but \nI don't think that the **locals() trick will disappear any time before \nPython 5000.\n\n\n-- \nSteven\n"}], "python@mrabarnett.plus.com": [{"type": "email", "time": 1559430813, "time_spent": 7, "content": "Subject: [Python-Dev] [PEP 558] thinking through locals() semantics\n\n\nOn 2019-06-02 13:51, Steven D'Aprano wrote:\n> On Sun, Jun 02, 2019 at 11:52:02PM +1200, Greg Ewing wrote:\n>> Armin Rigo wrote:\n>> >You have the occasional big function that benefits a lot from being\n>> >JIT-compiled but which contains ``.format(**locals())``.\n>> \n>> There should be a lot less need for that now that we have f-strings.\n> \n> I think you're forgetting that a lot of code (especially libraries)\n> either have to support older versions of Python, and so cannot use\n> f-strings at all, or was written using **locals before f-strings came\n> along, and hasn't been touched since.\n> \n> Another case where f-strings don't help is when the template is\n> dynamically generated.\n> \n> It may be that there will be less new code written using **locals() but\n> I don't think that the **locals() trick will disappear any time before\n> Python 5000.\n> \nWe've had .format_map since Python 3.2, so why use \n``.format(**locals())`` instead of ``.format_map(locals())``?\n"}], "random832@fastmail.com": [{"type": "email", "time": 1559439190, "time_spent": 23, "content": "Subject: [Python-Dev] [PEP 558] thinking through locals() semantics\n\n\nOn Wed, May 29, 2019, at 01:25, Nick Coghlan wrote:\n> Having a single locals() call de-optimize an entire function would be \n> far from ideal.\n\nWhat if there were a way to explicitly de-optimize a function, rather than guessing the user's intent based on looking for locals and exec calls (both of which are builtins which could be shadowed or assigned to other variables)?\n\nAlso, regardless of anything else, maybe in an optimized function locals should return a read-only mapping?\n"}], "vstinner@redhat.com": [{"type": "email", "time": 1559440379, "time_spent": 17, "content": "Subject: [Python-Dev] Expected stability of PyCode_New() and\n types.CodeType() signatures\n\n\nLe vendredi 31 mai 2019, Simon Cross <hodgestar+pythondev at gmail.com> a\n?crit :\n> As the maintainer of Genshi, ...\n> The new CodeType.replace will remove some potential sources of breakages\nin the future, so thank you very much for adding that.\n\nHi Simon,\n\nYou're welcome :-) Genshi was one of my motivation to add\nCodeType.replace() ;-)\n\nVictor\n\n-- \nNight gathers, and now my watch begins. It shall not end until my death.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://mail.python.org/pipermail/python-dev/attachments/20190602/3e1921d5/attachment.html>\n"}, {"type": "email", "time": 1559516719, "time_spent": 3, "content": "Subject: [Python-Dev] Recent buildbot reports and asyncio test failures\n\n\nMany tests are failing randomly on buildbots.\n\n*MANY* failures: \"test_asyncio: test_cancel_gather_2() dangling thread\"\nhttps://bugs.python.org/issue37137\n\nSome failures on specific buildbots. multiprocessing does crash\nrandomly on Windows:\n   https://bugs.python.org/issue37143\nand on FreeBSD:\n   https://bugs.python.org/issue37135\nI bet on a regression caused by:\n   https://bugs.python.org/issue33608#msg344240\n\nOne failure. \"test_asyncio timed out on AMD64 FreeBSD CURRENT Shared 3.x\"\nhttps://bugs.python.org/issue37142\n\nI failed to reproduce any of these bugs.\n\nVictor\n\n\nLe lun. 3 juin 2019 ? 12:42, Pablo Galindo Salgado\n<pablogsal at gmail.com> a ?crit :\n>\n> Hi everyone,\n>\n> Just a heads-up regarding some messages you will see in your pull requests. There is an intermittent failure on some buildbots\n> regarding asyncio:\n>\n> https://buildbot.python.org/all/#/builders/21\n>\n> As the builds do not fail all the time, the systems understand that if your (merged) commits fail to build, they may be the cause\n> of the failure and then it does a report into the pull request.\n>\n> I am working on investigating a way to improve the report mechanism to make it less noisy in this case, but bear in mind that\n> the correct way to solve this is fixing the asyncio bug in the test suite and this won't likely go away completely until is solved.\n>\n> We are doing all that we can to solve all the recent leaks and failures on the test suite, but there is a noticeable increase in the\n> number of merged pull requests because of the imminent feature freeze and because this happens across several timezones\n> is very difficult to get them all.\n>\n> Thanks to everyone that is helping solving these bugs :)\n>\n> Regards from sunny London,\n> Pablo Galindo Salgado\n> _______________________________________________\n> Python-Dev mailing list\n> Python-Dev at python.org\n> https://mail.python.org/mailman/listinfo/python-dev\n> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com\n\n\n\n--\nNight gathers, and now my watch begins. It shall not end until my death.\n"}, {"type": "email", "time": 1559554510, "time_spent": 18, "content": "Subject: [Python-Dev] Recent buildbot reports and asyncio test failures\n\n\nHi,\n\nUpdate. I'm collaborating with Pablo to fix these recent regressions.\nWe had to revert 2 changes to fix asyncio and multiprocessing test\nfailures and crashes.\n\nNew issue:\n\n\"opcode cache for LOAD_GLOBAL emits false alarm in memory leak hunting\"\nhttps://bugs.python.org/issue37146\n\nINADA-san worked around this issue by disabling the new opcode cache\n(LOAD_GLOBAL optimization) when Python is compiled in debug mode.\n\nWe should try to find a more long term solution after beta1 release.\n\n\nLe lun. 3 juin 2019 ? 17:05, Victor Stinner <vstinner at redhat.com> a ?crit :\n> *MANY* failures: \"test_asyncio: test_cancel_gather_2() dangling thread\"\n> https://bugs.python.org/issue37137\n\nAndrew Svetlov identified the root issue, it's a side effect of a new feature:\nhttps://bugs.python.org/issue37137#msg344488\n\nHe reverted his change to fix the bug. We may reconsider the feature\nafter beta1 (that's up to our Release Manager, I guess).\n\nNote: I pushed 2 changes to attempt to fix the issue, but they didn't\nfix the issue. We can consider to revert them after beta1.\n\n\n> Some failures on specific buildbots. multiprocessing does crash\n> randomly on Windows:\n>    https://bugs.python.org/issue37143\n> and on FreeBSD:\n>    https://bugs.python.org/issue37135\n> I bet on a regression caused by:\n>    https://bugs.python.org/issue33608#msg344240\n\nPablo and me identified the root issue:\nhttps://bugs.python.org/issue37135#msg344509\n\nI reverted a change to fix the regression.\n\nSadly, previously I also reverted a different change which wasn't the\nroot cause. We can consider to maybe reapply it after beta1.\n\n(!) \"Night gathers, and now my watch begins. It shall not end until my\ndeath.\" (!)\n\nVictor\n"}, {"type": "email", "time": 1559636489, "time_spent": 7, "content": "Subject: [Python-Dev] PEP 594: update 1\n\n\nSo what is happening for this PEP since Python 3.8 beta1 has been\nreleased? Is it too late for Python 3.8 or not?\n\nIt seems like most people are confused by the intent of the PEP. IMHO\nit would be better to rewrite \"Remove packages from the stdlib\" as\n\"Move some stdlib modules to PyPI\". But that would require to rewrite\nsome parts of the PEP to explain how modules are moved, who become the\nnew maintainers, how to support modules both in stdlib (old Python\nversions) and in PyPI (new Python), etc.\n\nVictor\n"}, {"type": "git_log", "time": 1561743588, "time_spent": 41, "content": "    bpo-37412: Fix test_os.test_getcwd_long_path() on macOS (GH-14452)"}], "lukasz@langa.pl": [{"type": "email", "time": 1559630644, "time_spent": 13, "content": "Subject: [Python-Dev] [RELEASE] Python 3.8.0b1 is now available for testing\nMessage-ID: <2FEBF8A0-7D2D-4BB8-BE37-6B0E6D9F75B8@langa.pl>\n\nThe time has come for Python 3.8.0b1:\nhttps://www.python.org/downloads/release/python-380b1/ <https://www.python.org/downloads/release/python-380b1/>\nThis release is the first of four planned beta release previews. Beta release previews are intended to give the wider community the opportunity to test new features and bug fixes and to prepare their projects to support the new feature release. The next pre-release of Python 3.8 will be 3.8.0b2, currently scheduled for 2019-07-01.\n\n\nCall to action\n\nWe strongly encourage maintainers of third-party Python projects to test with 3.8 during the beta phase and report issues found to the Python bug tracker <https://bugs.python.org/> as soon as possible. While the release is planned to be feature complete entering the beta phase, it is possible that features may be modified or, in rare cases, deleted up until the start of the release candidate phase (2019-09-30). Our goal is have no ABI changes after beta 3 and no code changes after 3.8.0rc1, the release candidate. To achieve that, it will be extremely important to get as much exposure for 3.8 as possible during the beta phase.\n\nPlease keep in mind that this is a preview release and its use is not recommended for production environments.\n\n\nA new challenger has appeared!\n\nWith the release of Python 3.8.0b1, development started on Python 3.9. The ?master? branch in the cpython repository now tracks development of 3.9 while Python 3.8 received its own branch, called simply ?3.8?.\n\n\nAcknowledgments\n\nAs you might expect, creating new branches triggers a lot of changes in configuration for all sorts of tooling that we?re using. Additionally, the inevitable deadline for new features caused a flurry of activity that tested the buildbots to the max. The revert hammer got  used more than once.\n\nI would not be able to make this release available alone. Many thanks to the fearless duo of Pablo Galindo Salgado and Victor Stinner for spending tens of hours during the past week working on getting the buildbots green for release. Seriously, that took a lot of effort. We are all so lucky to have you both.\n\nThanks to Andrew Svetlov for his swift fixes to asyncio and to Yury Selivanov for code reviews, even when jetlagged. Thanks to Julien Palard for untangling the documentation configs. Thank you to Zachary Ware for help with buildbot and CI configuration. Thanks to Mariatta for helping with the bots. Thank you to Steve Dower for delivering the Windows installers.\n\nMost importantly though, huge thanks to Ned Deily who not only helped me understand the scope of this special release but also did some of the grunt work involved.\n\nLast but not least, thanks to you for making this release more meaty than I expected. There?s plenty of super exciting changes in there. Just take a look at ?What?s New <https://docs.python.org/3.8/whatsnew/3.8.html>?!\n\n\nOne more thing\n\nHey, fellow Core Developer, Beta 2 is in four weeks. If your important new feature got reverted last minute, or you decided not to merge due to inadequate time, I have a one time offer for you (restrictions apply). If you:\n\nfind a second core developer champion for your change; and\nin tandem you finish your change complete with tests and documentation before Beta 2\nthen I will let it in. I?m asking for a champion because it?s too late now for changes with hasty design or code review. And as I said, restrictions apply. For instance, at this point changes to existing APIs are unlikely to be accepted. Don?t start new work with 3.8 in mind. 3.9 is going to come sooner than you think!\n\n\n\n- ?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://mail.python.org/pipermail/python-dev/attachments/20190605/547d26e8/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://mail.python.org/pipermail/python-dev/attachments/20190605/547d26e8/attachment.sig>\n"}, {"type": "git_log", "time": 1559679152, "time_spent": 42, "content": "    Bump to 3.9.0a0"}], "tjreedy@udel.edu": [{"type": "email", "time": 1559642837, "time_spent": 22, "content": "Subject: [Python-Dev] PEP 594: update 1\n\n\nOn 6/4/2019 8:21 PM, Victor Stinner wrote:\n> So what is happening for this PEP since Python 3.8 beta1 has been\n> released? Is it too late for Python 3.8 or not?\n\nThe only action proposed for 3.8 was soft deprecation in the docs, which \nI presume can be done later in the beta process.\n\n> It seems like most people are confused by the intent of the PEP. IMHO\n> it would be better to rewrite \"Remove packages from the stdlib\" as\n> \"Move some stdlib modules to PyPI\". But that would require to rewrite\n> some parts of the PEP to explain how modules are moved, who become the\n> new maintainers, how to support modules both in stdlib (old Python\n> versions) and in PyPI (new Python), etc.\n> \n> Victor\n> \n\n\n-- \nTerry Jan Reedy\n\n\n\n"}, {"type": "git_log", "time": 1560892104, "time_spent": 47, "content": "    bpo-37325: Fix focus traversal for 2 IDLE dialogs (#14209)\n    \n    Tab now moves focus across and down for Help Source and Custom Run."}], "benjamin@python.org": [{"type": "git_log", "time": 1561849222, "time_spent": 67, "content": "    bpo-37437: Pass -Wno-unreachable-code when compiling expat. (GH-14470)"}], "adelfino@gmail.com": [{"type": "git_log", "time": 1561845589, "time_spent": 46, "content": "    Make StreamHandler.terminator more discoverable (GH-14359)"}], "steve.dower@python.org": [{"type": "git_log", "time": 1561843723, "time_spent": 99, "content": "    bpo-37369: Fixes crash when reporting fatal error (GH-14468)"}], "44193521+aeros167@users.noreply.github.com": [{"type": "git_log", "time": 1561750631, "time_spent": 105, "content": "    bpo-19696: Moved \"test_pkgimport.py\" to dir \"test_importlib\" (GH-14303)\n    \n    \n    \n    Also renamed the file to \"test_pkg_import.py\" to better follow the naming convention. Component of issue 19696.\n    \n    \n    \n    \n    \n    https://bugs.python.org/issue19696"}], "54418+brettcannon@users.noreply.github.com": [{"type": "git_log", "time": 1561749271, "time_spent": 110, "content": "    bpo-37403: Touch up venv docs (GH-14458)\n    \n    Add a versionadded for PS Core and note that `.venv` is a common virtual environment name."}], "brian@sweetapp.com": [{"type": "git_log", "time": 1561748092, "time_spent": 81, "content": "    bpo-31783: Fix a race condition creating workers during shutdown (#13171)\n    \n    * bpo-31783: Fix a race condition while creating workers during interpreter shutdown\n    \n    * \u2261\u0192\u00f4\u00a3\u2261\u0192\u00f1\u00fb Added by blurb_it."}], "kupruser@gmail.com": [{"type": "git_log", "time": 1561738336, "time_spent": 71, "content": "    bpo-37380: subprocess: don't use _active on win (GH-14360)\n    \n    As noted by @eryksun in [1] and [2], using _cleanup and _active(in\n    __del__) is not necessary on Windows, since:\n    \n    > Unlike Unix, a process in Windows doesn't have to be waited on by\n    > its parent to avoid a zombie. Keeping the handle open will actually\n    > create a zombie until the next _cleanup() call, which may be never\n    > if Popen() isn't called again.\n    \n    This patch simply defines `subprocess._active` as `None`, for which we already\n    have the proper logic in place in `subprocess.Popen.__del__`, that prevents it\n    from trying to append the process to the `_active`. This patch also defines\n    `subprocess._cleanup` as a noop for Windows.\n    \n    [1] https://bugs.python.org/issue37380#msg346333\n    [2] https://bugs.python.org/issue36067#msg336262\n    \n    Signed-off-by: Ruslan Kuprieiev <ruslan@iterative.ai>"}], "J.Demeyer@UGent.be": [{"type": "git_log", "time": 1561715340, "time_spent": 119, "content": "    bpo-37337: Add _PyObject_VectorcallMethod() (GH-14228)"}], "shihai1992@gmail.com": [{"type": "git_log", "time": 1561712577, "time_spent": 46, "content": "    bpo-37432: Doc: Fix signature of PyObject_Del() (GH-14430)"}], "songofacandy@gmail.com": [{"type": "git_log", "time": 1561655137, "time_spent": 103, "content": "    bpo-30345: travis: use -Og with --with-pydebug (GH-14423)"}], "brandtbucher@gmail.com": [{"type": "git_log", "time": 1561651857, "time_spent": 90, "content": "    closes bpo-37420: Handle errors during iteration in os.sched_setaffinity. (GH-14414)"}], "andrew.svetlov@gmail.com": [{"type": "git_log", "time": 1561635527, "time_spent": 67, "content": "    Replace deprecation warning with RuntimeError (GH-14397)"}], "carl@bordum.dk": [{"type": "git_log", "time": 1561590798, "time_spent": 108, "content": "    bpo-37376: pprint support for SimpleNamespace (GH-14318)\n    \n    \n    \n    https://bugs.python.org/issue37376"}], "zspytz@gmail.com": [{"type": "git_log", "time": 1561582460, "time_spent": 54, "content": "    bpo-37419: Fix possible segfaults when passing large sequences to os.posix_spawn() (GH-14409)\n    \n    Use Py_ssize_t instead of int for i."}], "maxking@users.noreply.github.com": [{"type": "git_log", "time": 1561579982, "time_spent": 61, "content": "    bpo-29412: Fix indexError when parsing a header value ending unexpectedly (GH-14387)\n    \n    * patched string index out of range error in get_word function of _header_value_parser.py and created tests in test__header_value_parser.py for CFWS.\n    * Raise HeaderParseError instead of continuing when parsing a word."}], "pierreglaser@msn.com": [{"type": "git_log", "time": 1561501817, "time_spent": 49, "content": "    bpo-37244: Fix test_multiprocessing.test_resource_tracker() (GH-14288)\n    \n    Increase robustness of test_resource_tracker(): retry for 60 seconds."}], "tir.karthi@gmail.com": [{"type": "git_log", "time": 1561465015, "time_spent": 51, "content": "    bpo-37392: Update the dir(sys) in module tutorial (GH-14365)"}], "Pablogsal@gmail.com": [{"type": "git_log", "time": 1561460123, "time_spent": 55, "content": "    Fix minor spelling error in What's new for Python 3.8 (GH-14371)"}], "rhettinger@users.noreply.github.com": [{"type": "git_log", "time": 1561430362, "time_spent": 84, "content": "     bpo-36546: Mark first argument as position only (GH-14363)"}], "david_k_hess@mac.com": [{"type": "git_log", "time": 1561420019, "time_spent": 51, "content": "    bpo-4963: Fix for initialization and non-deterministic behavior issues in mimetypes (GH-3062)"}], "animalize@users.noreply.github.com": [{"type": "git_log", "time": 1561419806, "time_spent": 88, "content": "    bpo-25361: Enable SSE2 instructions for Windows 32-bit build (GH-12438)"}], "zihenglv@gmail.com": [{"type": "git_log", "time": 1561399191, "time_spent": 105, "content": "    bpo-32627: Fix compile error when conflicting `_uuid` headers included (GH-11751)"}], "gabe@gabeappleton.me": [{"type": "git_log", "time": 1561370336, "time_spent": 64, "content": "    bpo-37345: Add formal UDPLITE support (GH-14258)\n    \n    \n    \n    At the moment you can definitely use UDPLITE sockets on Linux systems, but it would be good if this support were formalized such that you can detect support at runtime easily.\n    \n    At the moment, to make and use a UDPLITE socket requires something like the following code:\n    \n    ```\n    >>> import socket\n    >>> a = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 136)\n    >>> b = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 136)\n    >>> a.bind(('localhost', 44444))\n    >>> b.sendto(b'test'*256, ('localhost', 44444))\n    >>> b.setsockopt(136, 10, 16)\n    >>> b.sendto(b'test'*256, ('localhost', 44444))\n    >>> b.setsockopt(136, 10, 32)\n    >>> b.sendto(b'test'*256, ('localhost', 44444))\n    >>> b.setsockopt(136, 10, 64)\n    >>> b.sendto(b'test'*256, ('localhost', 44444))\n    ```\n    \n    If you look at this through Wireshark, you can see that the packets are different in that the checksums and checksum coverages change.\n    \n    With the pull request that I am submitting momentarily, you could do the following code instead:\n    \n    ```\n    >>> import socket\n    >>> a = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDPLITE)\n    >>> b = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDPLITE)\n    >>> a.bind(('localhost', 44444))\n    >>> b.sendto(b'test'*256, ('localhost', 44444))\n    >>> b.set_send_checksum_coverage(16)\n    >>> b.sendto(b'test'*256, ('localhost', 44444))\n    >>> b.set_send_checksum_coverage(32)\n    >>> b.sendto(b'test'*256, ('localhost', 44444))\n    >>> b.set_send_checksum_coverage(64)\n    >>> b.sendto(b'test'*256, ('localhost', 44444))\n    ```\n    \n    One can also detect support for UDPLITE just by checking\n    \n    ```\n    >>> hasattr(socket, 'IPPROTO_UDPLITE')\n    ```\n    \n    \n    https://bugs.python.org/issue37345"}], "ben@bendarnell.com": [{"type": "git_log", "time": 1561225101, "time_spent": 86, "content": "    asyncio: Fix docs for default event loop (#14308)\n    \n    When the Windows default event loop changed, `asyncio-policy.rst` was updated but `asyncio-eventloop.rst` was missed."}], "joernheissler@users.noreply.github.com": [{"type": "git_log", "time": 1561214455, "time_spent": 58, "content": "    bpo-35224: Reverse evaluation order of key: value in dict comprehensions (GH-14139)\n    \n    \n    \n    \u0393\u00c7\u00aa as proposed in PEP 572; key is now evaluated before value.\n    \n    \n    \n    \n    \n    https://bugs.python.org/issue35224"}], "mbarkhau@gmail.com": [{"type": "git_log", "time": 1561207866, "time_spent": 61, "content": "    Improve threading.daemon docstring (GH-14278)\n    \n    \n    \n    Rephrase and clarify that \"the entire Python program exits when only daemon threads are left\". This matches the documentation at https://docs.python.org/3/library/threading.html#thread-objects."}], "brad.solomon.1124@gmail.com": [{"type": "git_log", "time": 1561141221, "time_spent": 66, "content": "    Use `python -m pip install` in porting guide and venv docs (GH-13257)\n    \n    This is to help prevent people from accidentally installing into the wrong Python interpreter if they are not aware of which Python interpreter `pip` points to."}], "33177550+nanjekyejoannah@users.noreply.github.com": [{"type": "git_log", "time": 1561141020, "time_spent": 99, "content": "    bpo-30202 : Update test.test_importlib.test_abc to test find_spec() (GH-12847)"}], "paulmon@users.noreply.github.com": [{"type": "git_log", "time": 1561135205, "time_spent": 61, "content": "    bpo-36511: Fix -u parameters for ARM32 tests (GH-14280)"}], "aixtools@users.noreply.github.com": [{"type": "git_log", "time": 1561125480, "time_spent": 106, "content": "    bpo-36210: update optional extension handling for AIX (GH-12202)\n    \n    * Switch to officially supported curses from 3rd-party ASIS supported ncurses\n    * stop saying optional modules osaudiodev and spwd are missing on AIX\n    \n    Patch by M.Felt"}], "shashank201101193@gmail.com": [{"type": "git_log", "time": 1561086142, "time_spent": 66, "content": "    Remove redundant if check from optional argument function in argparse. (GH-8766)"}], "arilik.ismail@gmail.com": [{"type": "git_log", "time": 1561041055, "time_spent": 69, "content": "    Fix typo, 'widger' -> 'widget', in idlelib/tree.py (GH-14263)"}], "ericvsmith@users.noreply.github.com": [{"type": "git_log", "time": 1561018948, "time_spent": 55, "content": "    Fix bpo number in News file. (GH-14260)"}], "Harmon758@gmail.com": [{"type": "git_log", "time": 1560978087, "time_spent": 100, "content": "    Add missing single quote in io.TextIOWrapper.reconfigure documentation (GH-14246)\n    \n    \n    \n    Add a missing single quote character in the documentation for `io.TextIOWrapper.reconfigure`."}], "vinay_sajip@yahoo.co.uk": [{"type": "git_log", "time": 1560954597, "time_spent": 43, "content": "    bpo-37331: Clarify format of socket handler messages in the documentation. (GH-14234)"}], "levkivskyi@gmail.com": [{"type": "git_log", "time": 1560904311, "time_spent": 92, "content": "    Document typing.ForwardRef (GH-14216)"}], "pganssle@users.noreply.github.com": [{"type": "git_log", "time": 1560884265, "time_spent": 71, "content": "    Add pganssle to CODEOWNERS and ACKS (GH-14138)\n    \n    Also adds abalkin to CODEOWNERS for date and time related files."}], "mike.gleen@gmail.com": [{"type": "git_log", "time": 1560881697, "time_spent": 112, "content": "    bpo-34903: Document that some strptime formats only require 1 digit (GH-14149)\n    \n    For datetime.datetime.strptime(), the leading zero for some two-digit formats is optional.\n    \n    This adds a footnote to the strftime/strptime documentation to reflect this fact, and adds some tests to ensure that it is true.\n    \n    bpo-34903"}], "nad@python.org": [{"type": "git_log", "time": 1560847033, "time_spent": 82, "content": "    bpo-35031: also disable TLS 1.3 for test_start_tls_server_1 on macOS (GH-14188)"}], "dcarlier@afilias.info": [{"type": "git_log", "time": 1560839794, "time_spent": 106, "content": "    remove dead code (GH-14104)\n    \n    default case ought to handle the \"unexpected\"."}], "cheryl.sabella@gmail.com": [{"type": "git_log", "time": 1560824650, "time_spent": 103, "content": "    bpo-5680: IDLE: Customize running a module (GH-13763)\n    \n    The initialize options are 1) add command line options, which are appended to sys.argv as if passed on a real command line, and 2) skip the shell restart. The customization dialog is accessed by a new entry on the Run menu."}], "taleinat+github@gmail.com": [{"type": "git_log", "time": 1560800460, "time_spent": 54, "content": "    bpo-37039: Make IDLE's Zoom Height adjust to users' screens (GH-13678)\n    \n    Measure required height by quickly maximizing once per screen.\n    A search for a better method failed."}], "cooper@fb.com": [{"type": "git_log", "time": 1560795494, "time_spent": 90, "content": "    bpo-34556: Add --upgrade-deps to venv module (#13100)\n    \n    Add --upgrade-deps to venv module\n    - This allows for pip + setuptools to be automatically upgraded to the latest version on PyPI\n    - Update documentation to represent this change\n    \n    bpo-34556: Add --upgrade to venv module"}], "vlabakje@gmail.com": [{"type": "git_log", "time": 1560759017, "time_spent": 51, "content": "    bpo-36688: Adding an implementation of RLock in _dummy_thread (GH-12943)"}], "dickinsm@gmail.com": [{"type": "git_log", "time": 1560704001, "time_spent": 56, "content": "    Turn math.isqrt assertion into a comment to clarify its purpose. (GH-14131)"}], "julien@palard.fr": [{"type": "git_log", "time": 1560673505, "time_spent": 51, "content": "    Doc: Remove an ugly space before a dot. (GH-14123)"}], "remi.lapeyre@henki.fr": [{"type": "git_log", "time": 1560667737, "time_spent": 66, "content": "    bpo-35922: Fix RobotFileParser when robots.txt has no relevant crawl delay or request rate (GH-11791)\n    \n    Co-Authored-By: Tal Einat <taleinat+github@gmail.com>"}], "alex.gaynor@gmail.com": [{"type": "git_log", "time": 1560607776, "time_spent": 52, "content": "    Update link in colorsys docs to be https (GH-14062)"}], "48903745+ubordignon@users.noreply.github.com": [{"type": "git_log", "time": 1560598990, "time_spent": 81, "content": "    Fix typo in Lib/concurrent/futures/thread.py (GH-13953)"}], "gery.ogam@gmail.com": [{"type": "git_log", "time": 1560598403, "time_spent": 97, "content": "    Update weakref.rst (GH-14098)"}], "makdon@makdon.me": [{"type": "git_log", "time": 1560434389, "time_spent": 46, "content": "    bpo-6689: os.path.commonpath raises ValueError for different drives isn't documented (GH-14045)\n    \n    \n    \n    It would raise ValueError(\"Paths don't have the same drive\") if the paths on different drivers, which is not documented.\n    \n    \n    os.path.commonpath raises ValueError when the *paths* are in different drivers, but it is not documented.\n    Update the document according @Windsooon 's suggestion.\n    It actually raise ValueError according line 355 of [test of path](https://github.com/python/cpython/blob/master/Lib/test/test_ntpath.py)\n    \n    \n    https://bugs.python.org/issue6689"}], "49998481+websurfer5@users.noreply.github.com": [{"type": "git_log", "time": 1560409289, "time_spent": 65, "content": "    bpo-35070: test_getgrouplist may fail on macOS if too many groups (GH-13071)"}], "aaskar@google.com": [{"type": "git_log", "time": 1560313835, "time_spent": 46, "content": "    bpo-29505: Fuzz json module, enforce size limit on int(x) fuzz (GH-13991)\n    \n    * bpo-29505: Enable fuzz testing of the json module, enforce size limit on int(x) fuzz and json input size to avoid timeouts.\n    \n    Contributed by by Ammar Askar for Google."}], "laike9m@users.noreply.github.com": [{"type": "git_log", "time": 1560311169, "time_spent": 113, "content": "    bpo-32625: Updated documentation for EXTENDED_ARG. (GH-13985)\n    \n    Python 3.6 changed the size of bytecode instruction, while the documentation for `EXTENDED_ARG` was not updated accordingly."}], "guido@python.org": [{"type": "git_log", "time": 1560298992, "time_spent": 104, "content": "    bpo-35766: Change format for feature_version to (major, minor) (GH-13992)\n    \n    \n    \n    (A single int is still allowed, but undocumented.)\n    \n    \n    \n    https://bugs.python.org/issue35766"}], "aaronpaulhurst@gmail.com": [{"type": "git_log", "time": 1560218064, "time_spent": 100, "content": "    closes bpo-35184: Fix XML_POOR_ENTROPY option that breaks makesetup parsing of pyexpat line in Setup. (GH-13064)\n    \n    When the line is uncommented, the equals character causes it to be incorrectly interpreted\n    as a macro definition by makesetup.  This results in invalid Makefile output.\n    \n    The expat code only requires XML_POOR_ENTROPY to be defined; the value is unnecessary."}], "christian@python.org": [{"type": "git_log", "time": 1560179988, "time_spent": 43, "content": "    bpo-37215: Fix dtrace issue introduce by bpo-36842 (GH-13940)\n    \n    \n    \n    Signed-off-by: Christian Heimes <christian@python.org>\n    \n    \n    https://bugs.python.org/issue37215"}], "antoine@python.org": [{"type": "git_log", "time": 1560084435, "time_spent": 77, "content": "    bpo-36785: PEP 574 What's New entry (#13931)"}], "ncoghlan@gmail.com": [{"type": "git_log", "time": 1560071262, "time_spent": 78, "content": "    Add some placeholder notes for major 3.8 features (GH-13927)"}], "marcin.niemira@gmail.com": [{"type": "git_log", "time": 1560027906, "time_spent": 57, "content": "    bpo-11122: fix hardcoded path checking for rpmbuild in bdist_rpm.py (GH-10594)"}], "ammar@ammaraskar.com": [{"type": "git_log", "time": 1560004996, "time_spent": 89, "content": "    bpo-29505: Fix interpreter in fuzzing targets to be relocatable (GH-13907)"}], "flying-sheep@web.de": [{"type": "git_log", "time": 1559995546, "time_spent": 70, "content": "    bpo-37173: Show passed class in inspect.getfile error (GH-13861)\n    \n    \n    \n    Currently, inspect.getfile(str) will report nonsense:\n    \n    ```pytb\n    >>> inspect.getfile(str)\n    TypeError: <module 'builtins' (built-in)> is a built-in class\n    ```\n    \n    This fixes that\n    \n    \n    https://bugs.python.org/issue37173"}], "asottile@umich.edu": [{"type": "git_log", "time": 1559942619, "time_spent": 62, "content": "    cross port importlib-metadata PR #76 (#13903)\n    \n    https://gitlab.com/python-devs/importlib_metadata/merge_requests/76"}], "grrrr@protonmail.com": [{"type": "git_log", "time": 1559938116, "time_spent": 100, "content": "    bpo-37150: Throw ValueError if FileType class object was passed in add_argument (GH-13805)\n    \n    \n    \n    There is a possibility that someone (like me) accidentally will omit parentheses with `FileType` arguments after `FileType`, and parser will contain wrong file until someone will try to use it.\n    \n    Example:\n    ```python\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-x', type=argparse.FileType)\n    ```\n    \n    \n    https://bugs.python.org/issue37150"}], "skrah@bytereef.org": [{"type": "git_log", "time": 1559899114, "time_spent": 80, "content": "    Use assertEqual(). (#13883)"}], "wieser.eric@gmail.com": [{"type": "git_log", "time": 1559895206, "time_spent": 71, "content": "    bpo-37188: Fix a divide-by-zero in arrays of size-0 objects (#13881)"}], "taleinat@gmail.com": [{"type": "git_log", "time": 1559886880, "time_spent": 75, "content": "    bpo-37177: make IDLE's search dialogs transient (GH-13869)\n    \n    This avoids the search dialogs being hidden behind the editor window."}], "walter@livinglogic.de": [{"type": "git_log", "time": 1559815988, "time_spent": 56, "content": "    bpo-2661: Make mapping tests better usable for custom mapping classes. (GH-11157)\n    \n    \n    \n    In test_fromkeys() the derived test class now supports all arguments in its\n    constructor so that the class to be tested can use its own constructor in its\n    fromkeys() implementation.\n    \n    In test_mutatingiteration() the test fails as soon as iterating over a\n    dictionary with one entry and adding new entries in the loop iterates more\n    than once (to avoid endless loops in faulty implementations).\n    \n    \n    \n    https://bugs.python.org/issue2661"}], "barry@python.org": [{"type": "git_log", "time": 1559788819, "time_spent": 63, "content": "    Add importlib.metadata to what's new. (#13855)"}], "aramaswamis@gmail.com": [{"type": "git_log", "time": 1559773087, "time_spent": 73, "content": "    bpo-35551: encodings update (GH-11446)"}], "bentyeh@users.noreply.github.com": [{"type": "git_log", "time": 1559725684, "time_spent": 51, "content": "    Fix documentation (GH-13721)\n    \n    \n    \n    Based on the source code https://github.com/python/cpython/blob/4a686504eb2bbf69adf78077458508a7ba131667/Lib/multiprocessing/pool.py#L755 AsyncResult.successful() raises a ValueError, not an AssertionError."}], "emmanuelarias30@gmail.com": [{"type": "git_log", "time": 1559713553, "time_spent": 103, "content": "    bpo-36373:  Deprecate explicit loop parameter in all public asyncio APIs [streams] (GH-13671)\n    \n    \n    \n    This PR deprecate explicit loop parameters in all public asyncio APIs\n    \n    This issues is split to be easier to review.\n    \n    Second step: streams.py\n    \n    \n    \n    \n    \n    https://bugs.python.org/issue36373"}], "zach@python.org": [{"type": "git_log", "time": 1559682190, "time_spent": 91, "content": "    bpo-34282: Remove deprecated enum _convert method (GH-13823)"}], "petter.strandmark@gmail.com": [{"type": "git_log", "time": 1559676889, "time_spent": 79, "content": "    bpo-35047: Update whatsnew/3.8 for better mock error message (GH-13746)"}], "lothiraldan@gmail.com": [{"type": "git_log", "time": 1559661618, "time_spent": 58, "content": "    Fix extraneous whitespace in QueueListener.prepare (GH-13803)"}], "mcorcherojim@bloomberg.net": [{"type": "git_log", "time": 1559661491, "time_spent": 117, "content": "    bpo-30699: Improve example on datetime tzinfo instances (GH-4290)\n    \n    * Improve example on tzinfo instances\n    \n    Move from GMTX to TZX when naming the classes, as GMT1 might be rather\n    confusing as seen in the reported issue.\n    In addition, move to UTC over GMT and improve the tzname implementation.\n    \n    * Simplify datetime with tzinfo example\n    \n    Move the example in the documentation to just use timezone.utc and a\n    user defined Kabul timezone rather than having two user defined\n    timezones with DST.\n    \n    Kabul timezone is still interesting as it changes its offset but not\n    based on DST. This is more accurate as the previous example was missing\n    information about the fold attribute. Additionally, implementing the fold\n    attribute was rather complex and probably not relevant enough for the\n    section \"datetime with tzinfo\"."}], "cclauss@me.com": [{"type": "git_log", "time": 1559531984, "time_spent": 88, "content": "    Fix variable name copy/paste error in build-installer.py (GH-13038)"}], "hack.augusto@gmail.com": [{"type": "git_log", "time": 1559528088, "time_spent": 85, "content": "    bpo-33569 Preserve type information with dataclasses.InitVar (GH-8927)"}], "bussonniermatthias@gmail.com": [{"type": "git_log", "time": 1559522602, "time_spent": 70, "content": "    bpo-36896: Clarify that some types constructors are unstable (GH-13271)"}], "encukou@gmail.com": [{"type": "git_log", "time": 1559521709, "time_spent": 112, "content": "    bpo-36027: Really fix \"incompatible pointer type\" compiler warning (GH-13761)\n    \n    Apologies for the earlier hasty attempt."}], "michele.angrisano@gmail.com": [{"type": "git_log", "time": 1559511252, "time_spent": 87, "content": "    bpo-19184: Update the documentation of dis module. (GH-13652)\n    \n    * bpo-19184: Update the documentation of dis module\n    \n    * Explain the behavior of the number of arguments of RAISE_VARGARGS\n      opcode.\n    \n    * bpo-19184: Update blurb.\n    \n    * bpo-19184: Fix typo in the dis Documentation.\n    \n    * bpo-19184: Address review comments and improve the doc\n    \n    * bpo-19184: Remove news file."}], "2836374+timhoffm@users.noreply.github.com": [{"type": "git_log", "time": 1559494690, "time_spent": 69, "content": "    Add description to the command line help of the argument clinic (GH-8518)"}], "mdickinson@enthought.com": [{"type": "git_log", "time": 1559467446, "time_spent": 119, "content": "    bpo-36027: Extend three-argument pow to negative second argument (GH-13266)"}], "ericsnowcurrently@gmail.com": [{"type": "git_log", "time": 1559425186, "time_spent": 105, "content": "    bpo-33608: Factor out a private, per-interpreter _Py_AddPendingCall(). (gh-13714)"}], "marco.buttu@gmail.com": [{"type": "git_log", "time": 1559423508, "time_spent": 77, "content": "    bpo-29414: Change 'the for statement is such an iterator' in Tutorial (GH-273)"}], "fedoseev.sergey@gmail.com": [{"type": "git_log", "time": 1559421138, "time_spent": 55, "content": "    bpo-34303: Micro-optimizations in functools.reduce() (GH-8598)"}], "evanunderscore@gmail.com": [{"type": "git_log", "time": 1559416162, "time_spent": 71, "content": "    bpo-28595: Allow shlex whitespace_split with punctuation_chars (GH-2071)"}], "franciscouzo@gmail.com": [{"type": "git_log", "time": 1559409240, "time_spent": 91, "content": "    Improve exception message for str.format (GH-12675)"}], "anthony.p.shaw@gmail.com": [{"type": "git_log", "time": 1559404318, "time_spent": 119, "content": "    bpo-31968: Documentation -- add clarification on the globals dict for exec() (GH-13140)"}], "stephane@wirtel.be": [{"type": "git_log", "time": 1559389293, "time_spent": 56, "content": "    Doc: Correct the creation year and the credits of the Logo Programming language (GH-13520)"}], "bzvi7919@gmail.com": [{"type": "git_log", "time": 1559380749, "time_spent": 66, "content": "    bpo-36813: Fix QueueListener to call task_done() upon termination. (GH-13113)\n    \n    \n    \n    Fixed QueueListener in order to avoid random deadlocks.\n    Unable to add regression tests atm due to time constraints, will add it in a bit.\n    Regarding implementation, although it's nested, it does not cause performance issues whatsoever, and does not call task_done() in case of an exception (which is the right thing to do IMHO).\n    \n    \n    https://bugs.python.org/issue36813"}], "Aggarwal.yash2011@gmail.com": [{"type": "git_log", "time": 1559373687, "time_spent": 86, "content": "    bpo-35431: Implemented math.comb (GH-11414)"}], "wiwindson@outlook.com": [{"type": "git_log", "time": 1559370796, "time_spent": 61, "content": "    bpo-18911: clarify that the minidom XML writer receives texts but not bytes (GH-13352)"}], "mariocj89@gmail.com": [{"type": "git_log", "time": 1559364550, "time_spent": 64, "content": "    Add option to trace to run modules (GH-5134)\n    \n    Adds a new option in trace that allows tracing runnable modules. It is\n    exposed as `--module module_name` as `-m` is already in use for another\n    argument."}], "rkd@rkd.me.uk": [{"type": "git_log", "time": 1559362437, "time_spent": 54, "content": "    bpo-29984: Improve 'heapq' test coverage (GH-992)"}]}
